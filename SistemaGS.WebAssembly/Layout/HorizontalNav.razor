@inject SweetAlertService Swat;
@inject NavigationManager navManager;
@inject AuthenticationStateProvider authenticationStateProvider;

<nav class="navbar navbar-expand-sm navbar-nav navbar-light bg-light">
    <div class="container">
        <div class="d-sm-inline-flex justify-content-end gap-3">
            <AuthorizeView>
                <Authorized>
                    <div style="text-align: right">
                        <strong>Usuario loggeado: </strong>@context.User.Claims.Where(u => u.Type == ClaimTypes.Name).Select(c => c.Value).SingleOrDefault()
                    </div>
                    <button class="btn btn-outline-dark ms-auto ms-md-0 me-3" type="button" @onclick="CerrarSesion">Salir</button>
                </Authorized>
            </AuthorizeView>

        </div>
    </div>
</nav>

@code{
    public void Dispose()
    {
        
    }

    private async Task CerrarSesion()
    {
        SweetAlertResult result = await Swat.FireAsync(new SweetAlertOptions
        {
            Title = "Aviso",
            Text = $"¿Seguro de cerrar la sesión activa?",
            Icon = SweetAlertIcon.Info,
            ShowCancelButton = true,
            ConfirmButtonText = "Si",
            CancelButtonText = "No"
        });
        if (result.IsConfirmed)
        {
            var AuthExt = (AutExt)authenticationStateProvider;
            await AuthExt.ActualizarEstadoAut(null);
            navManager.NavigateTo("/login", true);
        }
    }
}
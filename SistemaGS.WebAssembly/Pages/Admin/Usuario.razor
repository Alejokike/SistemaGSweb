@page "/Usuario"
@page "/Usuario/{Id:int}"

@inject IUsuarioService usuarioService
@inject IToastService toastService;
@inject NavigationManager _navService;
@inject AuthenticationStateProvider authenticationStateProvider;

@attribute [Authorize(Roles = "Administrador, Solicitante")]

<AuthorizeView>
    <Authorized>
        @{
            int IdLogged = Convert.ToInt32(@context.User.Claims.Where(u => u.Type == ClaimTypes.NameIdentifier).Select(c => c.Value).SingleOrDefault());
            disable = IdLogged == model.IdUsuario;
        }
    </Authorized>
</AuthorizeView>

<BlazoredToasts />

<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@Titulo</p>
</div>

<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">
        <EditForm Model="model" OnValidSubmit="GuardarCambios">

            <DataAnnotationsValidator> </DataAnnotationsValidator>

            <div class="input-group">
                <span class="input-group-text bg-light" id="basic-addon3">Nombre Completo</span>
                <input type="text" class="form-control" @bind-value="model.NombreCompleto">
            </div>
            <ValidationMessage For="@(() => model.NombreCompleto)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Nombre de Usuario</span>
                <input type="text" class="form-control" @bind-value="model.NombreUsuario">
            </div>
            <ValidationMessage For="@(() => model.NombreUsuario)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Cedula</span>
                <input type="text" class="form-control" @bind-value="model.Perfil">
            </div>
            <ValidationMessage For="@(() => model.NombreUsuario)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Correo</span>
                <input type="text" class="form-control" @bind-value="model.Correo"><br />
            </div>
            <ValidationMessage For="@(() => model.Correo)" />
            
            <div class="mt-3">
                <label for="rolUsuario" class="form-label">Rol de Usuario</label>
                <select id="rolUsuario" class="form-select" disabled="@disable" @bind="model.IdRol">
                    <option value="" selected>--Seleccione un rol</option>
                    <option value=1>Administrador</option>
                    <option value=2>Asistente</option>
                    <option value=3>Lector</option>
                    <option value=4>Solicitante</option>
                </select>
            </div>
            <ValidationMessage For="@(() => model.IdRol)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Contraseña</span>
                <input type="password" class="form-control" @bind-value="model.Clave">
            </div>
            <ValidationMessage For="@(() => model.Clave)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Confirmar Contraseña</span>
                <input type="password" class="form-control" @bind-value="model.ConfirmarClave">
            </div>
            <ValidationMessage For="@(() => model.ConfirmarClave)" />

            <div class="input-group">
                <span class="input-group-text bg-light" id="basic-addon3">Cédula</span>
                <input type="text" class="form-control" @bind-value="model.Cedula">
            </div>
            <ValidationMessage For="@(() => model.Cedula)" />

            <div class="form-check form-switch mt-3">
                <label class="form-check-label" for="userStatusSwitch">Status Usuario: </label>
                <input class="form-check-input" type="checkbox" role="switch" disabled="@disable" id="userStatusSwitch" @bind="model.Activo">
                <span class="ms-2">
                    @((bool)model.Activo! ? "Activo" : "Inactivo")
                </span>
            </div>

            <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@Boton</button>
                <a href="/usuarios" class="btn btn-secondary" style="width:130px">Volver</a>
            </div>
        </EditForm>
    </div>

</div>

@code {
    [Parameter] 
    public int ID { get; set; }
    private string Titulo = "Nuevo usuario";
    private string Boton = "Crear";
    private UsuarioDTO model = new UsuarioDTO();
    private UsuarioDTO modelrecover = new UsuarioDTO();
    private bool disable = false;

    protected override async Task OnParametersSetAsync()
    {
        if(ID != 0)
        {
            Titulo = "Editar Usuario";
            Boton = "Actualizar";

            var response = await usuarioService.Obtener(ID);
            if (response.EsCorrecto)
            {
                modelrecover = (UsuarioDTO) response.Resultado!;
                modelrecover.ConfirmarClave = modelrecover.Clave;

                model = modelrecover;
                model.Clave = "";
                model.ConfirmarClave = "";
            }
            else
            {
                toastService.ShowWarning(response.Mensaje!);
            }
        }
    }

    private async Task GuardarCambios()
    {
        if(model.Clave != model.ConfirmarClave)
        {
            toastService.ShowWarning("Las contraseñas no coinciden");
            return;
        }

        bool respuesta = true;
        string mensaje = string.Empty;

        if(ID != 0)
        {
            if (model.Clave == "" && model.ConfirmarClave == "")
            {
                model.Clave = modelrecover.Clave;
            }

            var response = await usuarioService.Editar(model);
            if (response.EsCorrecto)
            {
                mensaje = "Usuario modificado";
            }
            else
            {
                respuesta = false;
                mensaje = "No se pudo editar";
            }
        }
        else
        {
            if (model.Clave == "" && model.ConfirmarClave == "")
            {
                toastService.ShowWarning("El usuario precisa de contraseña");
                return;
            }

            var response = await usuarioService.Crear(model);
            if (response.EsCorrecto)
            {
                mensaje = "Usuario creado";
            }
            else
            {
                respuesta = false;
                mensaje = "No se pudo crear";
            }
        }

        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _navService.NavigateTo("/Usuarios");
        }
        else
        {
            toastService.ShowWarning(mensaje);
        }
    }
}

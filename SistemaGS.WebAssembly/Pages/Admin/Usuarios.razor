@page "/Usuarios"

@inject IUsuarioService usuarioService
@inject IToastService toastService;
@inject SweetAlertService swat;
@inject AuthenticationStateProvider authenticationStateProvider;

@attribute [Authorize(Roles = "Administrador")]

<style>
    p {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
</style>

<AuthorizeView>
    <Authorized>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-6 col-md-4 col-xl-3 mb-4">
        <div class="d-grid gap-1 col-12 mx-auto">
            <a class="btn btn-primary" href="/usuario">Nuevo usuario</a>
        </div>
    </div>
    <div class="col-sm-6 col-md-8 col-xl-9">
        <div class="input-group mb-7">
            <select class="form-select" @bind="@rol">
                <option value=0 selected>Todos</option>
                <option value=1>Administrador</option>
                <option value=2>Asistente</option>
                <option value=3>Lector</option>
                <option value=4>Solicitante</option>
            </select>
            <input type="text" class="form-control" placeholder="Buscar usuario..." @bind-value="buscar" @oninput="HandleInput">
            <button class="btn btn-outline-secondary" type="button" @onclick="(async () => await ObtenerUsuarios(rol,buscar))">
                <i class="oi oi-magnifying-glass"></i> Buscar
            </button>
        </div>
    </div>
</div>

<div class="row gx-4 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-xl-4 justify-content-start mt-2">
    @if (Lista != null)
    {
        int IdLogged = Convert.ToInt32(@context.User.Claims.Where(u => u.Type == ClaimTypes.NameIdentifier).Select(c => c.Value).SingleOrDefault());
        foreach(UsuarioDTO item in Lista)
        {
            bool disable = IdLogged == item.IdUsuario;

            <div class="col mb-6">
                <div class="card h-300">
                    <div class="card-body p-7">
                        <div class="text-center">
                            <i class="oi oi-person" style="font-size:50px"></i>
                        </div>
                        <div class="text-start">
                            <p class="m-1"><b>Nombre: </b>@item.NombreCompleto</p>
                            <p class="m-1"><b>Rol: </b>@item.Rol</p>
                            <p class="m-1"><b>Usuario: </b>@item.NombreUsuario</p>
                            <p class="m-1"><b>Correo: </b>@item.Correo</p>
                        </div>
                    </div>
                    <div class="card-footer bg-transparent">
                        <div class="row justify-content-between">
                            <a class="col-5 btn btn-sm btn-outline-primary mt-auto" href="/usuario/@item.IdUsuario"><i class="oi oi-pencil fs-5"></i>Editar</a>
                            <button class="col-5 btn btn-sm btn-outline-danger mt-auto" type="button" disabled="@disable" @onclick="(async () => await Eliminar(item))">
                                <i class="oi oi-trash fs-5"></i> Eliminar
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }

</div>
    </Authorized>
</AuthorizeView>
@code {
    private List<UsuarioDTO>? Lista = null;
    private string buscar = "";
    private int rol = 0;

    private async Task ObtenerUsuarios(int rol = 0, string valor = "")
    {
        var response = await usuarioService.Lista(rol, valor);
        if (response.EsCorrecto) Lista = (List<UsuarioDTO>) response.Resultado!;
        else Lista = new List<UsuarioDTO>();
    }

    protected override async Task OnInitializedAsync()
    {
        await ObtenerUsuarios(rol, buscar);
    }

    private async Task HandleInput(ChangeEventArgs e)
    {
        buscar = e.Value?.ToString()!;
        await ObtenerUsuarios(rol,buscar);
    }

    private async Task Eliminar(UsuarioDTO model)
    {
        SweetAlertResult result = await swat.FireAsync(new SweetAlertOptions
        {
            Title = "Eliminar este usuario",
            Text = $"Seleccionado: {model.NombreUsuario}",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Si, eliminar",
            CancelButtonText = "No, Volver",
        });

        if (result.IsConfirmed)
        {
            var response = await usuarioService.Eliminar(model.IdUsuario);
            if (response.EsCorrecto)
            {
                await ObtenerUsuarios();
                toastService.ShowSuccess("Usuario eliminado");
            }
            else toastService.ShowSuccess(response.Mensaje!);
        }
    }
}
